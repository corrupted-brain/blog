<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Kailash</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2022-02-25T18:54:16+05:45</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Kailash</name>
  <uri>http://localhost:4000/</uri>
  
</author>


<entry>
  <title type="html"><![CDATA[How I bypassed PHP functions to read sensitive files on server]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/2022/02/04/bypassing-PHP-functions-to-read-system-file/" />
  <id>http://localhost:4000/blog/2022/02/04/bypassing-PHP-functions-to-read-system-file</id>
  <published>2022-02-04T00:00:00+05:45</published>
  <updated>2022-02-04T00:00:00+05:45</updated>
  <author>
    <name>Kailash</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;During the penetration testing of a target, the &lt;a href=&quot;https://github.com/projectdiscovery/nuclei&quot;&gt;nuclei&lt;/a&gt; results show that the website of an organization is vulnerable to code execution vulnerability i.e &lt;a href=&quot;https://blog.ovhcloud.com/cve-2017-9841-what-is-it-and-how-do-we-protect-our-customers/&quot;&gt;CVE-2017-9841&lt;/a&gt;. The CVE-2017-9841 vulnerability lets a user run PHP code on vulnerable websites remotely, by exploiting a breach in PHPUnit lets us run desirable PHP codes and read sensitive files.&lt;/p&gt;

&lt;p&gt;After checking all the things, I verified the existence of vulnerability making the proper request in Burp suite, and confirmed by running of the PHP function,  &lt;code class=&quot;highlighter-rouge&quot;&gt;getcwd()&lt;/code&gt; that returns the current working directory.&lt;img src=&quot;/images/posts/rce1.png&quot; alt=&quot;php getcwd() function&quot; /&gt;
Now there won’t be any problem running system commands by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;shell_exec()&lt;/code&gt; function in PHP. This function executes user-supplied commands and returns output as a string. I did this by simply listing all the home directories/files of the current user.&lt;img src=&quot;/images/posts/rce2.png&quot; alt=&quot;&quot; /&gt; Finally, reading the config file was just easy as reading this post. &lt;img src=&quot;/images/posts/rce3.png&quot; alt=&quot;&quot; /&gt; I stopped over here and thought of reporting this issue to the organization but because of the tight schedule of my daily life I was unable to report the issue for 4-5 days. After a few days I thought of reporting the issue but wanted to confirm whether the vulnerability still exists or not. &lt;strong&gt;But to my surprise 😕 It wasn’t working as before&lt;/strong&gt; 😂. &lt;img src=&quot;/images/posts/rce4.png&quot; alt=&quot;&quot; /&gt;
As per my guess within 4-5 days, the administrator might have checked the logs or might be aware of the exploit that I tried and made fixation to it. Hence, the execution of &lt;code class=&quot;highlighter-rouge&quot;&gt;shell_exec()&lt;/code&gt; function was forbidden. However, few other functions could still be executed except shell_exec(). From the image below I confirmed that the execution was forbidden by applying some filter in the phpinfo file.&lt;img src=&quot;/images/posts/rce5.png&quot; alt=&quot;&quot; /&gt; Along with shell_exec(), other functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;show_source()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;shell_exec()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;exec()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;popen()&lt;/code&gt; and  &lt;code class=&quot;highlighter-rouge&quot;&gt;proc_open()&lt;/code&gt; which can be used to read/write files were also disabled.
After this I started looking for other possible ways to read the files again, and found we can use the &lt;a href=&quot;https://www.php.net/manual/en/function.glob.php&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;glob()&lt;/code&gt;&lt;/a&gt; method to return an array of filenames and directories. I used following snippet of code locally and confirmed it returns the array of files and directories.&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Eventually, I was able to  list the files again as shown below, and now all that’s left is to find a way to read those listed files.&lt;img src=&quot;/images/posts/rce6.png&quot; alt=&quot;&quot; /&gt;  At the end, I figured out that I had to combine multiple functions together to read files.&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../../../../../../../public_html/application/config/database.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;explode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file_get_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above code,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$a variable is used to set target file which we are going to read. The target file was found using &lt;em&gt;print_r(glob())&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;In the $b variable, we used explode function to return array of strings. &lt;em&gt;file_get_contents()&lt;/em&gt; reads contents of database.php from public_html/application/config/database.php and contents array is returned.&lt;/li&gt;
  &lt;li&gt;Finally, printed contents of $b variable using &lt;em&gt;print_r()&lt;/em&gt; or &lt;em&gt;var_dump()&lt;/em&gt; can also be used. 
&lt;img src=&quot;/images/posts/rce7.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/2022/02/04/bypassing-PHP-functions-to-read-system-file/&quot;&gt;How I bypassed PHP functions to read sensitive files on server&lt;/a&gt; was originally published by Kailash at &lt;a href=&quot;http://localhost:4000&quot;&gt;Kailash&lt;/a&gt; on February 04, 2022.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[MSSQL Injection In JSON Request]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/2021/05/16/MSSQL-Injection-in-JSON-request/" />
  <id>http://localhost:4000/blog/2021/05/16/MSSQL-Injection-in-JSON-request</id>
  <published>2021-05-16T00:00:00+05:45</published>
  <updated>2021-05-16T00:00:00+05:45</updated>
  <author>
    <name>Kailash</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://portswigger.net/web-security/sql-injection&quot;&gt;SQL injection&lt;/a&gt; is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. The impact of the SQL Injection can be extracting data from the database, dropping data, gaining OS or SQL shell access etc.&lt;/p&gt;

&lt;p&gt;As it was private scope, I do not want to disclose the application name. So, I was testing the android application of it. I had to bypass &lt;a href=&quot;https://developer.android.com/training/articles/security-ssl&quot;&gt;SSL pinning&lt;/a&gt; to intercept the application requests. Finally, I was able to do it. The first page was the registration page while opening an app, I filled in all the necessary details. An OTP code was sent to our provided phone number. I used a random six-digit code and intercepted the OTP validation request as shown below.
&lt;img src=&quot;/images/posts/app_registration.png&quot; alt=&quot;Registration request&quot; /&gt;
Then I sent the above request to Repeater tab in Burp suite and added a single quote on &lt;em&gt;DeviceId&lt;/em&gt; parameter. Modified requests look like &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;DeviceId&quot;:&quot;lol'&quot;&lt;/code&gt;
&lt;img src=&quot;/images/posts/app_registration_sqli_req.png&quot; alt=&quot;SQL Injection Request&quot; /&gt;
And the response was like: 
&lt;img src=&quot;/images/posts/app_registration_sqli_resp.png&quot; alt=&quot;SQL Injection Response&quot; /&gt;
This confirms the existence of the vulnerability. To be assured I used the time delay command for few databases as
&lt;code class=&quot;highlighter-rouge&quot;&gt;SLEEP(10)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;WAITFOR DELAY '0:0:10'&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT pg_sleep(10)&lt;/code&gt; and second one worked as shown below.  &lt;img src=&quot;/images/posts/app_registration_sqli_sleep.png&quot; alt=&quot;SQL Injection Requets&quot; /&gt; &lt;br /&gt;
Then in the response time, we can see 10ms delays. It confirms MSSQL Injection.
&lt;img src=&quot;/images/posts/app_registration_sqli_sleepres.png&quot; alt=&quot;SQL Injection Response&quot; /&gt;
To make proof of concept I decided to create a database object using the query &lt;code class=&quot;highlighter-rouge&quot;&gt;'CREATE TABLE kailash (line varchar(8000));--'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/app_registration_sqli_tblc.png&quot; alt=&quot;SQL Injection Response&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After discussion with the development team, it was confirmed that the above query executed successfully. &lt;br /&gt;
&lt;img src=&quot;/images/posts/app_registration_sqli_tbl.jpg&quot; alt=&quot;SQL Injection Response&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: &lt;em&gt;I used different devices during the assessment so you may find difference in parameter values in used screenshots.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/2021/05/16/MSSQL-Injection-in-JSON-request/&quot;&gt;MSSQL Injection In JSON Request&lt;/a&gt; was originally published by Kailash at &lt;a href=&quot;http://localhost:4000&quot;&gt;Kailash&lt;/a&gt; on May 16, 2021.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Blind XSS on Google Internal System ]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/2021/05/13/Google-blind-XSS/" />
  <id>http://localhost:4000/blog/2021/05/13/Google-blind-XSS</id>
  <published>2021-05-13T00:00:00+05:45</published>
  <updated>2021-05-13T00:00:00+05:45</updated>
  <author>
    <name>Kailash</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/blind-cross-site-scripting/&quot;&gt;Blind cross-site scripting&lt;/a&gt; (XSS) refers to a type of code injection where an attacker inserts XSS payload in user input fields and they are going to be stored somewhere and executes in an application that is not in control of an attacker.&lt;/p&gt;

&lt;p&gt;I ended up finding blind XSS in one of the Google’s internal system (GUTS ticketing system). I used blind XSS payload from &lt;a href=&quot;https://xsshunter.com&quot;&gt;xsshunter&lt;/a&gt; and filled up randomly input fields on the form from Google supplier portal. The forms from the supplier portal must be tracked from GUTS, that’s what I assume and my payload gets executed.&lt;/p&gt;

&lt;h4 id=&quot;what-happened-&quot;&gt;What happened ?&lt;/h4&gt;

&lt;p&gt;I get a response in my xsshunter after a very long time and at the moment I was unknown which parameter I tested for.&lt;img src=&quot;/images/posts/google_reply-1.png&quot; alt=&quot;Google reply&quot; /&gt; I tried to read the &lt;a href=&quot;https://www.w3schools.com/js/js_htmldom.asp&quot;&gt;DOM&lt;/a&gt; so that we may know the possible parameter. Unfortunately, XSS hunter keeps loading and the browser gets
frozen. Only Referer and Cookies are known. I passed the information that I have to the Google team and they finally managed to know the actual cause and rewards me. &lt;img src=&quot;/images/posts/google_reward_xss.png&quot; alt=&quot;Reward message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I requested to disclose a vulnerable endpoint as seen above but ended up with the following message.&lt;img src=&quot;/images/posts/google_final_reply.png&quot; alt=&quot;Reply&quot; /&gt; As part of Google’s Vulnerability Reward Program, the panel has decided to issue a reward of $5000 for this issue as it affects the sensitive application.&lt;/p&gt;

&lt;h4 id=&quot;giveaway-&quot;&gt;Giveaway ?&lt;/h4&gt;
&lt;p&gt;Always take a log where we tested for XSS. We don’t know when our luck hits in bug bounty.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/2021/05/13/Google-blind-XSS/&quot;&gt;Blind XSS on Google Internal System &lt;/a&gt; was originally published by Kailash at &lt;a href=&quot;http://localhost:4000&quot;&gt;Kailash&lt;/a&gt; on May 13, 2021.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[GraphQL IDOR in Facebook streamer dashboard.]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/2020/11/18/GraphQL-IDOR-in-Facebook-streamer-dashboard/" />
  <id>http://localhost:4000/blog/2020/11/18/GraphQL-IDOR-in-Facebook-streamer-dashboard</id>
  <published>2020-11-18T00:00:00+05:45</published>
  <updated>2020-11-18T00:00:00+05:45</updated>
  <author>
    <name>Kailash</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;h4 id=&quot;description&quot;&gt;Description:&lt;/h4&gt;
&lt;p&gt;While viewing our stream dashboard data from creator studio, there is an endpoint from where we can see our dashboard status. There is parameter called &lt;em&gt;profile_id&lt;/em&gt; in GraphQl request which can be misused to access data of other pages by using facebook page_id.&lt;/p&gt;

&lt;h4 id=&quot;steps-to-reproduce&quot;&gt;Steps to Reproduce:&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Start burpsuite and intercept the request.&lt;/li&gt;
  &lt;li&gt;Go to https://www.facebook.com/gaming/streamer and you will be redirected to creator studio.&lt;/li&gt;
  &lt;li&gt;We will forward all the intercepted request since it’s difficult to spot the correct request which has vulnerable parameters in multiple requests.&lt;/li&gt;
  &lt;li&gt;Meanwhile we will use find feature in burpsuite. we’ll search for &lt;em&gt;“GamesVideoStreamerDashboardProfileQuery”.&lt;/em&gt;
&lt;img src=&quot;/images/posts/graphql-request.png&quot; alt=&quot;graphql-request&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Once our search query matches we will forward that particular request to repeator and replace &lt;em&gt;profileID&lt;/em&gt; with desired game steaming pageID to see their stream stats. The response of the above request looks like as shown below.
&lt;img src=&quot;/images/posts/graphql-response.png&quot; alt=&quot;graphql-response&quot; /&gt;
According to facebook only highlighted information i.e. &lt;em&gt;“l30_live_earnings”&lt;/em&gt; and &lt;em&gt;“supporter_count”&lt;/em&gt; are sensitive which should not be disclosed to a user which does not have any role in the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h4&gt;
&lt;p&gt;After reviewing this issue, Facebook decided to award a bounty of $2000 and they fixed the issue by not displaying those information in the response to a users which does not have any role in page.
&lt;img src=&quot;/images/posts/facebook-reply.png&quot; alt=&quot;facebook-reply&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/2020/11/18/GraphQL-IDOR-in-Facebook-streamer-dashboard/&quot;&gt;GraphQL IDOR in Facebook streamer dashboard.&lt;/a&gt; was originally published by Kailash at &lt;a href=&quot;http://localhost:4000&quot;&gt;Kailash&lt;/a&gt; on November 18, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Stored Cross Site Scripting on Mdaemon Webmail (20.0.0)]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/2020/07/15/mdaemon-stored-xss/" />
  <id>http://localhost:4000/blog/2020/07/15/mdaemon-stored-xss</id>
  <published>2020-07-15T00:00:00+05:45</published>
  <updated>2020-07-15T00:00:00+05:45</updated>
  <author>
    <name>Kailash</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Two different cross site scripting vulnerabilities were found on version below 20.0.1 and reported to Mdaemon team. As per the resposne from their side both issues were addressed on &lt;a href=&quot;http://files.altn.com/MDaemon/Release/relnotes_en.html&quot;&gt;latest version 20.0.1 released&lt;/a&gt; on 18th August 2020.&lt;/p&gt;

&lt;h4 id=&quot;case-one&quot;&gt;Case One:&lt;/h4&gt;

&lt;p&gt;E-mail attachment field is vulnerable to XSS. A attachment with XSS payload as a file name can be uploaded to trigger execution of code. To do that follow steps below:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rename a file and set it’s name as &lt;code&gt;&amp;lt;img src=x onerror=alert(1)&amp;gt;.jpg &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Go to New mail, select recipient and the select attachment. Code gets executed as right after upload so it becomes self XSS.
 &lt;img src=&quot;/images/posts/mdaemon-xss-popup.png&quot; alt=&quot;XSS Popup1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Let’s send the mail to recipient and open from his/her side. Opening just a mail doesn’t executes the code but when the victim clicks on forward button, XSS pop-up is shown.&lt;br /&gt;
 &lt;img src=&quot;/images/posts/mdaemon-xss-popup-2.png&quot; alt=&quot;XSS Popup 2&quot; /&gt;
 Like this a stored self XSS can also becomes perfect XSS for victim users.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;case-two&quot;&gt;Case Two:&lt;/h4&gt;

&lt;p&gt;So the next vulnerable endpoint is Distribution list. A distribution list holds name and email address of persons. We can also refer it as a address book. Following steps can be followed to execute the vulnerability.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Go to contact section and distribution list menu. Create a new distribution list.&lt;/li&gt;
  &lt;li&gt;Contact name field was vulnerable to XSS. Use the payload &lt;code&gt;&amp;lt;img src=x onerror=alert(1)&amp;gt;&lt;/code&gt; 
&lt;img src=&quot;/images/posts/mdaemon-xss-distribution1.png&quot; alt=&quot;Mdaemon XSS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;We can see execution code and after saving it, each time we visits the distribution list section the XSS pop-up is seen.
&lt;img src=&quot;/images/posts/mdaemon-xss-distribution2.png&quot; alt=&quot;Mdaemon XSS&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/2020/07/15/mdaemon-stored-xss/&quot;&gt;Stored Cross Site Scripting on Mdaemon Webmail (20.0.0)&lt;/a&gt; was originally published by Kailash at &lt;a href=&quot;http://localhost:4000&quot;&gt;Kailash&lt;/a&gt; on July 15, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[CVE-2020-10596 in OpenCart]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/2020/05/29/CVE-2020-10596/" />
  <id>http://localhost:4000/blog/2020/05/29/CVE-2020-10596</id>
  <updated>2020-05-29T00:00:00-00:00</updated>
  <published>2020-05-29T00:00:00+05:45</published>
  
  <author>
    <name>Kailash</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p style=&quot;text-align: justify;&quot;&gt; Cross-site scripting attacks (XSS),is a type of attack in which malicious scripts are injected into websites and web applications and run on an end user’s platform. Vulnerable endpoints are found and JS code is injected to execute it for malicious purpose. Such endpoints can be search fields, profile information fields , file upload functions and many more. &lt;/p&gt;

&lt;p&gt;In authenticated attack refers to the conditions where an attacker must be logged in order to exploit the vulnerabilitiy. In &lt;a href=&quot;https://www.opencart.com&quot;&gt;OpenCart&lt;/a&gt; 3.0.3.2 it is possible to execute cross site scripting attack since the profile image upload feature in admin panel is not escaping user inputs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To execute follow the steps below.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Login to admin panel, navigate to system &amp;gt; users &amp;gt; edit existing user.&lt;/li&gt;
  &lt;li&gt;Go to Image change section and select a file with the XSS payload as &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&amp;gt;&amp;lt;svg onload=alert(&quot;XSS&quot;)&amp;gt;&lt;/code&gt; and save it.&lt;/li&gt;
  &lt;li&gt;Thats it.
 &lt;img src=&quot;/images/posts/xss-popup.png&quot; alt=&quot;XSS Popup&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What’s the solution ???&lt;/strong&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: justify;&quot;&gt; Same payload gets executes for directory name too. So, I suggested a regex which replaces special characters in filename/directory name with whitespaces and removes white spaces too. &lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Sanitize the filename&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;html_entity_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ENT_QUOTES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Using regex to filter filename&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/[^A-Za-z0-9\-\.]/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Validate the filename length&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;utf8_strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;utf8_strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error_filename'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GO_Example_Model_Thing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GO_Base_Db_ActiveRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Outcome:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xss-filtered.png&quot; alt=&quot;XSS Filter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But this won’t work if the file containing payload is uploaded using FTP service. So one of the solution on issue I have opened on github was &lt;code class=&quot;highlighter-rouge&quot;&gt;preg_replace('/[^a-zA-Z0-9\_\.\?]/', '', basename(html_entity_decode($this-&amp;gt;request-&amp;gt;post['x'], ENT_QUOTES, 'UTF-8')));&lt;/code&gt; by &lt;strong&gt;&lt;em&gt;straightlight&lt;/em&gt;&lt;/strong&gt;. Let’s see how they add fix in the main code of the opencart in next release.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/2020/05/29/CVE-2020-10596/&quot;&gt;CVE-2020-10596 in OpenCart&lt;/a&gt; was originally published by Kailash at &lt;a href=&quot;http://localhost:4000&quot;&gt;Kailash&lt;/a&gt; on May 29, 2020.&lt;/p&gt;
  </content>
</entry>

</feed>
